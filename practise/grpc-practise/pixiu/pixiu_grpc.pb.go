// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pixiu

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PixiuClient is the client API for Pixiu service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PixiuClient interface {
	GetPixiu(ctx context.Context, in *PixiuRequest, opts ...grpc.CallOption) (*PixiuReply, error)
}

type pixiuClient struct {
	cc grpc.ClientConnInterface
}

func NewPixiuClient(cc grpc.ClientConnInterface) PixiuClient {
	return &pixiuClient{cc}
}

func (c *pixiuClient) GetPixiu(ctx context.Context, in *PixiuRequest, opts ...grpc.CallOption) (*PixiuReply, error) {
	out := new(PixiuReply)
	err := c.cc.Invoke(ctx, "/pixiu.Pixiu/GetPixiu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PixiuServer is the server API for Pixiu service.
// All implementations must embed UnimplementedPixiuServer
// for forward compatibility
type PixiuServer interface {
	GetPixiu(context.Context, *PixiuRequest) (*PixiuReply, error)
	mustEmbedUnimplementedPixiuServer()
}

// UnimplementedPixiuServer must be embedded to have forward compatible implementations.
type UnimplementedPixiuServer struct {
}

func (UnimplementedPixiuServer) GetPixiu(context.Context, *PixiuRequest) (*PixiuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPixiu not implemented")
}
func (UnimplementedPixiuServer) mustEmbedUnimplementedPixiuServer() {}

// UnsafePixiuServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PixiuServer will
// result in compilation errors.
type UnsafePixiuServer interface {
	mustEmbedUnimplementedPixiuServer()
}

func RegisterPixiuServer(s grpc.ServiceRegistrar, srv PixiuServer) {
	s.RegisterService(&Pixiu_ServiceDesc, srv)
}

func _Pixiu_GetPixiu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PixiuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PixiuServer).GetPixiu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pixiu.Pixiu/GetPixiu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PixiuServer).GetPixiu(ctx, req.(*PixiuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Pixiu_ServiceDesc is the grpc.ServiceDesc for Pixiu service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pixiu_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pixiu.Pixiu",
	HandlerType: (*PixiuServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPixiu",
			Handler:    _Pixiu_GetPixiu_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pixiu/pixiu.proto",
}
